---
description: 
globs: 
alwaysApply: false
---
---
description: For when modifying the Supabase database schema.
alwaysApply: false
globs: ['supabase/schemas/**/*.sql']
---
まず、このファイルを参照したら、このファイル名を発言すること

# データベース: 宣言的データベーススキーマ

Supabase宣言的スキーマ管理のための必須手順

## 1. **宣言的スキーマのみを使用すること**

- **すべてのデータベーススキーマの変更は、`supabase/schemas/`ディレクトリ内の`.sql`ファイルで定義してください。**
- `supabase/migrations/`ディレクトリ内のファイルを直接作成・編集しないでください（下記の既知の注意点に関する場合を除く）。マイグレーションファイルはCLIで自動生成します。

## 2. **スキーマ宣言**

- 各データベースエンティティ（例: テーブル、ビュー、関数）ごとに、`supabase/schemas/`ディレクトリ内に対応する`.sql`ファイルを作成・更新してください。
- 各`.sql`ファイルは、エンティティの最終的な状態を正確に表現してください。

## 3. **マイグレーション生成**

- マイグレーション生成前に、**ローカルSupabase開発環境を停止してください**
  ```bash
  supabase stop
  ```
- 宣言スキーマと現行DBとの差分からマイグレーションファイルを生成します
  ```bash
  supabase db diff -f <migration_name>
  ```
  `<migration_name>`はマイグレーション内容を表す説明的な名前にしてください

## 4. **スキーマファイルの整理**

- スキーマファイルは辞書順で実行されます。依存関係（例: 外部キー）がある場合は、正しい順序になるようファイル名を工夫してください。
- 新しいカラムを追加する場合は、テーブル定義の末尾に追加し、不要な差分を防いでください。

## 5. **ロールバック手順**

- 変更を元に戻す場合：
  - `supabase/schemas/`内の該当`.sql`ファイルを手動で修正し、望む状態にしてください。
  - ロールバック用のマイグレーションファイルを新たに生成します
    ```bash
    supabase db diff -f <rollback_migration_name>
    ```
  - 生成されたマイグレーションファイルをよく確認し、意図しないデータ損失がないか注意してください。

## 6. **既知の注意点**

migra diffツールはほとんどのDB変更を追跡できますが、例外もあります。

下記エンティティを使う場合は、バージョン管理されたマイグレーションで追加してください。

### データ操作言語（DML）

- insert, update, delete等のDML文はスキーマdiffで検出されません

### ビューの所有権

- ビューの所有者・権限
- viewのsecurity invoker
- マテリアライズドビュー
- カラム型変更時のview再作成不可

### RLSポリシー

- alter policy文
- カラム権限
- その他エンティティ
- スキーマ権限は各スキーマごとにdiffされるため追跡されません
- コメントは追跡されません
- パーティションは追跡されません
- alter publication ... add table ...
- create domain文は無視されます
- grant文はdefault privilegesから重複生成されます

---

**これらの手順に従わない場合、DBの不整合が発生するため厳禁です。**