---
description: Supabase開発フローとベストプラクティス
alwaysApply: false
globs: ["**/*"]
---

まず、このファイルを参照したら、このファイル名を発言すること

# Supabase 開発フロールール

あなたは Supabase プロジェクトの開発フローとベストプラクティスのエキスパートです。以下の方針に従って、効率的な開発フローを維持してください。

## 1. 開発環境の方針

### Supabase CLI の使用

- **Supabase CLI を積極的に活用**
- ローカル環境での動作確認は不要
- リモート環境での直接的な操作を優先

### ローカル環境の制限

- **ローカル Supabase 環境の動作確認は不要**
- Docker を使用したローカル開発環境の構築は行わない
- ローカルでの Supabase コンテナ起動は不要

### リモート環境での動作確認

- **リモート Supabase プロジェクトでの動作確認を優先**
- 本番環境またはステージング環境での動作確認
- 実際のユーザー体験に近い環境での検証

## 2. 開発フロー

### Supabase CLI の活用

#### 基本的なコマンド

- **プロジェクト管理**

  ```bash
  npm run supabase:link          # リモートプロジェクトにリンク
  npm run supabase:unlink        # プロジェクトのリンクを解除
  ```

- **データベース管理**

  ```bash
  npm run supabase:db:push       # ローカルの変更をリモートに反映
  npm run supabase:db:pull       # リモートのスキーマをローカルに取得
  npm run supabase:db:diff       # ローカルとリモートの差分を確認
  ```

- **マイグレーション管理**

  ```bash
  npm run supabase:migration:new [name]  # 新しいマイグレーション作成
  npm run supabase:migration:up          # マイグレーション適用
  npm run supabase:migration:down        # マイグレーションロールバック
  ```

- **型定義の管理**
  ```bash
  npm run supabase:gen-types-remote      # リモート環境の型定義を取得
  ```

### データベーススキーマの管理

1. **マイグレーション作成**

   ```bash
   npm run supabase:migration:new [migration_name]
   ```

2. **リモート環境への反映**

   ```bash
   npm run supabase:db:push
   ```

3. **型定義の更新**
   ```bash
   npm run supabase:gen-types-remote
   ```

### 開発サイクル

1. **コード変更** → 2. **リモート環境への反映** → 3. **動作確認** → 4. **必要に応じて修正**

## 3. 環境変数の管理

### 必要な環境変数

```bash
# .env.local
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
SUPABASE_PROJECT_ID=your_supabase_project_id
```

### 環境変数の設定

- リモート Supabase プロジェクトの URL とキーを設定
- 本番環境とステージング環境を適切に使い分け

## 4. コマンドの使い分け

### 開発時

- `npm run supabase:db:push` - ローカルの変更をリモートに反映
- `npm run supabase:gen-types-remote` - リモート環境の型定義を取得

### デプロイ時

- `npm run supabase:deploy` - リンクされたプロジェクトにデプロイ

## 5. 品質管理

### 動作確認のポイント

- リモート環境での認証フローの確認
- データベース操作の動作確認
- ストレージ機能の動作確認
- リアルタイム機能の動作確認

### エラーハンドリング

- リモート環境でのエラーログの確認
- ネットワークエラーの適切な処理
- ユーザーフレンドリーなエラーメッセージの表示

## 6. セキュリティ

### 認証・認可

- リモート環境での認証フローの検証
- RLS ポリシーの動作確認
- 適切な権限管理の確認

### データ保護

- 機密データの適切な処理
- 環境変数の安全な管理
- 本番環境でのセキュリティ設定の確認

## 7. パフォーマンス

### 最適化

- リモート環境でのパフォーマンス測定
- データベースクエリの最適化
- ストレージの効率的な利用

### 監視

- リモート環境でのログ監視
- エラーレートの監視
- レスポンス時間の監視

## 注意事項

1. **ローカル環境の制限**

   - Docker の起動は不要
   - ローカル Supabase コンテナの起動は不要
   - ローカル環境での動作確認は行わない

2. **リモート環境の活用**

   - 本番環境またはステージング環境での動作確認
   - 実際のユーザー体験に近い環境での検証
   - リアルタイムでの動作確認

3. **開発効率の向上**
   - リモート環境での迅速な動作確認
   - 実際の環境での問題の早期発見
   - 本番環境に近い環境での開発

これらのルールに従って、効率的で実用的な Supabase 開発フローを維持してください。
